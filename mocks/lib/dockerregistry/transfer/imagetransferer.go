// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/dockerregistry/transfer (interfaces: ImageTransferer)

package mocktransferer

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/uber/kraken/core"
	base "github.com/uber/kraken/lib/store/base"
	reflect "reflect"
)

// MockImageTransferer is a mock of ImageTransferer interface
type MockImageTransferer struct {
	ctrl     *gomock.Controller
	recorder *MockImageTransfererMockRecorder
}

// MockImageTransfererMockRecorder is the mock recorder for MockImageTransferer
type MockImageTransfererMockRecorder struct {
	mock *MockImageTransferer
}

// NewMockImageTransferer creates a new mock instance
func NewMockImageTransferer(ctrl *gomock.Controller) *MockImageTransferer {
	mock := &MockImageTransferer{ctrl: ctrl}
	mock.recorder = &MockImageTransfererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockImageTransferer) EXPECT() *MockImageTransfererMockRecorder {
	return _m.recorder
}

// Download mocks base method
func (_m *MockImageTransferer) Download(_param0 string, _param1 core.Digest) (base.FileReader, error) {
	ret := _m.ctrl.Call(_m, "Download", _param0, _param1)
	ret0, _ := ret[0].(base.FileReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (_mr *MockImageTransfererMockRecorder) Download(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Download", reflect.TypeOf((*MockImageTransferer)(nil).Download), arg0, arg1)
}

// GetTag mocks base method
func (_m *MockImageTransferer) GetTag(_param0 string) (core.Digest, error) {
	ret := _m.ctrl.Call(_m, "GetTag", _param0)
	ret0, _ := ret[0].(core.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag
func (_mr *MockImageTransfererMockRecorder) GetTag(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetTag", reflect.TypeOf((*MockImageTransferer)(nil).GetTag), arg0)
}

// ListTags mocks base method
func (_m *MockImageTransferer) ListTags(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "ListTags", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags
func (_mr *MockImageTransfererMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListTags", reflect.TypeOf((*MockImageTransferer)(nil).ListTags), arg0)
}

// PutTag mocks base method
func (_m *MockImageTransferer) PutTag(_param0 string, _param1 core.Digest) error {
	ret := _m.ctrl.Call(_m, "PutTag", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTag indicates an expected call of PutTag
func (_mr *MockImageTransfererMockRecorder) PutTag(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutTag", reflect.TypeOf((*MockImageTransferer)(nil).PutTag), arg0, arg1)
}

// Stat mocks base method
func (_m *MockImageTransferer) Stat(_param0 string, _param1 core.Digest) (*core.BlobInfo, error) {
	ret := _m.ctrl.Call(_m, "Stat", _param0, _param1)
	ret0, _ := ret[0].(*core.BlobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (_mr *MockImageTransfererMockRecorder) Stat(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stat", reflect.TypeOf((*MockImageTransferer)(nil).Stat), arg0, arg1)
}

// Upload mocks base method
func (_m *MockImageTransferer) Upload(_param0 string, _param1 core.Digest, _param2 base.FileReader) error {
	ret := _m.ctrl.Call(_m, "Upload", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload
func (_mr *MockImageTransfererMockRecorder) Upload(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Upload", reflect.TypeOf((*MockImageTransferer)(nil).Upload), arg0, arg1, arg2)
}
