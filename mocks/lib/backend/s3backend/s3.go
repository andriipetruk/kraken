// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/backend/s3backend (interfaces: S3)

package mocks3backend

import (
	gomock "github.com/golang/mock/gomock"
	s3 "github.com/aws/aws-sdk-go/service/s3"
	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
	io "io"
	reflect "reflect"
)

// MockS3 is a mock of S3 interface
type MockS3 struct {
	ctrl     *gomock.Controller
	recorder *MockS3MockRecorder
}

// MockS3MockRecorder is the mock recorder for MockS3
type MockS3MockRecorder struct {
	mock *MockS3
}

// NewMockS3 creates a new mock instance
func NewMockS3(ctrl *gomock.Controller) *MockS3 {
	mock := &MockS3{ctrl: ctrl}
	mock.recorder = &MockS3MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockS3) EXPECT() *MockS3MockRecorder {
	return _m.recorder
}

// Download mocks base method
func (_m *MockS3) Download(_param0 io.WriterAt, _param1 *s3.GetObjectInput, _param2 ...func(*s3manager.Downloader)) (int64, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Download", _s...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (_mr *MockS3MockRecorder) Download(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Download", reflect.TypeOf((*MockS3)(nil).Download), _s...)
}

// HeadObject mocks base method
func (_m *MockS3) HeadObject(_param0 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	ret := _m.ctrl.Call(_m, "HeadObject", _param0)
	ret0, _ := ret[0].(*s3.HeadObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObject indicates an expected call of HeadObject
func (_mr *MockS3MockRecorder) HeadObject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HeadObject", reflect.TypeOf((*MockS3)(nil).HeadObject), arg0)
}

// ListObjectsPages mocks base method
func (_m *MockS3) ListObjectsPages(_param0 *s3.ListObjectsInput, _param1 func(*s3.ListObjectsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListObjectsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectsPages indicates an expected call of ListObjectsPages
func (_mr *MockS3MockRecorder) ListObjectsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListObjectsPages", reflect.TypeOf((*MockS3)(nil).ListObjectsPages), arg0, arg1)
}

// Upload mocks base method
func (_m *MockS3) Upload(_param0 *s3manager.UploadInput, _param1 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Upload", _s...)
	ret0, _ := ret[0].(*s3manager.UploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (_mr *MockS3MockRecorder) Upload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Upload", reflect.TypeOf((*MockS3)(nil).Upload), _s...)
}
