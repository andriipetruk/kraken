// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/hashring (interfaces: Ring)

package mockhashring

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/uber/kraken/core"
	reflect "reflect"
)

// MockRing is a mock of Ring interface
type MockRing struct {
	ctrl     *gomock.Controller
	recorder *MockRingMockRecorder
}

// MockRingMockRecorder is the mock recorder for MockRing
type MockRingMockRecorder struct {
	mock *MockRing
}

// NewMockRing creates a new mock instance
func NewMockRing(ctrl *gomock.Controller) *MockRing {
	mock := &MockRing{ctrl: ctrl}
	mock.recorder = &MockRingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRing) EXPECT() *MockRingMockRecorder {
	return _m.recorder
}

// Contains mocks base method
func (_m *MockRing) Contains(_param0 string) bool {
	ret := _m.ctrl.Call(_m, "Contains", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains
func (_mr *MockRingMockRecorder) Contains(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Contains", reflect.TypeOf((*MockRing)(nil).Contains), arg0)
}

// Locations mocks base method
func (_m *MockRing) Locations(_param0 core.Digest) []string {
	ret := _m.ctrl.Call(_m, "Locations", _param0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Locations indicates an expected call of Locations
func (_mr *MockRingMockRecorder) Locations(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Locations", reflect.TypeOf((*MockRing)(nil).Locations), arg0)
}

// Monitor mocks base method
func (_m *MockRing) Monitor(_param0 <-chan struct{}) {
	_m.ctrl.Call(_m, "Monitor", _param0)
}

// Monitor indicates an expected call of Monitor
func (_mr *MockRingMockRecorder) Monitor(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Monitor", reflect.TypeOf((*MockRing)(nil).Monitor), arg0)
}

// Refresh mocks base method
func (_m *MockRing) Refresh() {
	_m.ctrl.Call(_m, "Refresh")
}

// Refresh indicates an expected call of Refresh
func (_mr *MockRingMockRecorder) Refresh() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Refresh", reflect.TypeOf((*MockRing)(nil).Refresh))
}
