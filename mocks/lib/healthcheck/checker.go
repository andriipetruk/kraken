// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/healthcheck (interfaces: Checker)

package mockhealthcheck

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChecker is a mock of Checker interface
type MockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerMockRecorder
}

// MockCheckerMockRecorder is the mock recorder for MockChecker
type MockCheckerMockRecorder struct {
	mock *MockChecker
}

// NewMockChecker creates a new mock instance
func NewMockChecker(ctrl *gomock.Controller) *MockChecker {
	mock := &MockChecker{ctrl: ctrl}
	mock.recorder = &MockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockChecker) EXPECT() *MockCheckerMockRecorder {
	return _m.recorder
}

// Check mocks base method
func (_m *MockChecker) Check(_param0 context.Context, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Check", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check
func (_mr *MockCheckerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Check", reflect.TypeOf((*MockChecker)(nil).Check), arg0, arg1)
}
