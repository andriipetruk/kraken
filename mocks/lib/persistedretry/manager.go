// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/persistedretry (interfaces: Manager)

package mockpersistedretry

import (
	gomock "github.com/golang/mock/gomock"
	persistedretry "github.com/uber/kraken/lib/persistedretry"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockManager) EXPECT() *MockManagerMockRecorder {
	return _m.recorder
}

// Add mocks base method
func (_m *MockManager) Add(_param0 persistedretry.Task) error {
	ret := _m.ctrl.Call(_m, "Add", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (_mr *MockManagerMockRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Add", reflect.TypeOf((*MockManager)(nil).Add), arg0)
}

// Close mocks base method
func (_m *MockManager) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockManagerMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockManager)(nil).Close))
}

// Find mocks base method
func (_m *MockManager) Find(_param0 interface{}) ([]persistedretry.Task, error) {
	ret := _m.ctrl.Call(_m, "Find", _param0)
	ret0, _ := ret[0].([]persistedretry.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (_mr *MockManagerMockRecorder) Find(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Find", reflect.TypeOf((*MockManager)(nil).Find), arg0)
}

// SyncExec mocks base method
func (_m *MockManager) SyncExec(_param0 persistedretry.Task) error {
	ret := _m.ctrl.Call(_m, "SyncExec", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncExec indicates an expected call of SyncExec
func (_mr *MockManagerMockRecorder) SyncExec(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SyncExec", reflect.TypeOf((*MockManager)(nil).SyncExec), arg0)
}
