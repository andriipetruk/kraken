// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/persistedretry/tagreplication (interfaces: RemoteValidator)

package mocktagreplication

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRemoteValidator is a mock of RemoteValidator interface
type MockRemoteValidator struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteValidatorMockRecorder
}

// MockRemoteValidatorMockRecorder is the mock recorder for MockRemoteValidator
type MockRemoteValidatorMockRecorder struct {
	mock *MockRemoteValidator
}

// NewMockRemoteValidator creates a new mock instance
func NewMockRemoteValidator(ctrl *gomock.Controller) *MockRemoteValidator {
	mock := &MockRemoteValidator{ctrl: ctrl}
	mock.recorder = &MockRemoteValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRemoteValidator) EXPECT() *MockRemoteValidatorMockRecorder {
	return _m.recorder
}

// Valid mocks base method
func (_m *MockRemoteValidator) Valid(_param0 string, _param1 string) bool {
	ret := _m.ctrl.Call(_m, "Valid", _param0, _param1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Valid indicates an expected call of Valid
func (_mr *MockRemoteValidatorMockRecorder) Valid(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Valid", reflect.TypeOf((*MockRemoteValidator)(nil).Valid), arg0, arg1)
}
