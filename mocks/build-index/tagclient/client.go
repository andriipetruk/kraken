// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/build-index/tagclient (interfaces: Client)

package mocktagclient

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/uber/kraken/core"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClient) EXPECT() *MockClientMockRecorder {
	return _m.recorder
}

// DuplicatePut mocks base method
func (_m *MockClient) DuplicatePut(_param0 string, _param1 core.Digest, _param2 time.Duration) error {
	ret := _m.ctrl.Call(_m, "DuplicatePut", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DuplicatePut indicates an expected call of DuplicatePut
func (_mr *MockClientMockRecorder) DuplicatePut(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DuplicatePut", reflect.TypeOf((*MockClient)(nil).DuplicatePut), arg0, arg1, arg2)
}

// DuplicateReplicate mocks base method
func (_m *MockClient) DuplicateReplicate(_param0 string, _param1 core.Digest, _param2 core.DigestList, _param3 time.Duration) error {
	ret := _m.ctrl.Call(_m, "DuplicateReplicate", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DuplicateReplicate indicates an expected call of DuplicateReplicate
func (_mr *MockClientMockRecorder) DuplicateReplicate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DuplicateReplicate", reflect.TypeOf((*MockClient)(nil).DuplicateReplicate), arg0, arg1, arg2, arg3)
}

// Get mocks base method
func (_m *MockClient) Get(_param0 string) (core.Digest, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(core.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), arg0)
}

// Has mocks base method
func (_m *MockClient) Has(_param0 string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Has", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has
func (_mr *MockClientMockRecorder) Has(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Has", reflect.TypeOf((*MockClient)(nil).Has), arg0)
}

// List mocks base method
func (_m *MockClient) List(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "List", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockClient)(nil).List), arg0)
}

// ListRepository mocks base method
func (_m *MockClient) ListRepository(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "ListRepository", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepository indicates an expected call of ListRepository
func (_mr *MockClientMockRecorder) ListRepository(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListRepository", reflect.TypeOf((*MockClient)(nil).ListRepository), arg0)
}

// Origin mocks base method
func (_m *MockClient) Origin() (string, error) {
	ret := _m.ctrl.Call(_m, "Origin")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Origin indicates an expected call of Origin
func (_mr *MockClientMockRecorder) Origin() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Origin", reflect.TypeOf((*MockClient)(nil).Origin))
}

// Put mocks base method
func (_m *MockClient) Put(_param0 string, _param1 core.Digest) error {
	ret := _m.ctrl.Call(_m, "Put", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockClientMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockClient)(nil).Put), arg0, arg1)
}

// PutAndReplicate mocks base method
func (_m *MockClient) PutAndReplicate(_param0 string, _param1 core.Digest) error {
	ret := _m.ctrl.Call(_m, "PutAndReplicate", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAndReplicate indicates an expected call of PutAndReplicate
func (_mr *MockClientMockRecorder) PutAndReplicate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutAndReplicate", reflect.TypeOf((*MockClient)(nil).PutAndReplicate), arg0, arg1)
}

// Replicate mocks base method
func (_m *MockClient) Replicate(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Replicate", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replicate indicates an expected call of Replicate
func (_mr *MockClientMockRecorder) Replicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Replicate", reflect.TypeOf((*MockClient)(nil).Replicate), arg0)
}
