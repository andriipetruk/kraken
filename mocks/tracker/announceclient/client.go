// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/tracker/announceclient (interfaces: Client)

package mockannounceclient

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/uber/kraken/core"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClient) EXPECT() *MockClientMockRecorder {
	return _m.recorder
}

// Announce mocks base method
func (_m *MockClient) Announce(_param0 core.Digest, _param1 core.InfoHash, _param2 bool, _param3 int) ([]*core.PeerInfo, time.Duration, error) {
	ret := _m.ctrl.Call(_m, "Announce", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*core.PeerInfo)
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Announce indicates an expected call of Announce
func (_mr *MockClientMockRecorder) Announce(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Announce", reflect.TypeOf((*MockClient)(nil).Announce), arg0, arg1, arg2, arg3)
}
